searchState.loadedDescShard("redstone", 0, "RedStone\nType wrapping bytes represantion.\nEnvironment in which we execute. Provides logging etc\nType describing feed ids. We expect FeedId to be byte …\nConfiguration for the redstone protocol. Pluggable with …\nType describing address of signer. Typically pubkey of …\nType describing timpestamp, we use to directly show we …\nReturns config for payload decoding and validation.\nContract specific logic.\nCrypto operations needed for address recovery.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModule containing primitives used for verification of the …\nTimestamp verifier, with variants for trusted/nontrusted …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the <code>updater</code> is in the trusted set. If yes, …\nVerifies if:\nVerifies if:\nVerifies if:\nFor trusted variant see verify_trusted_update. For …\nVerifies if:\nVerifies if:\nVerifies if:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for a RedStone payload processor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerifies all members of the config.\nThe main processor of the RedStone payload.\nContains the error value\nContains the success value\nRepresents the result of processing the RedStone payload.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe timestamp encountered during processing.\nA collection of values processed during the operation.\nA trait defining validation operations for data feeds and …\nRetrieves the index of a given data feed.\nRetrieves the index of a given signer.\nValidates the signer count threshold for a given index …\nValidates the timestamp for a given index.\nDefault crypto operations. Uses k256 and sha3 crates.\nStandard nonspecialized implementation of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDummy implementation, does nothing.\nEnvironment in which the code executes.\nDefault and standard implementation of the <code>Environmet</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnvironment specific print function.\nUsed when an expected non-empty array or vector is found …\nIndicates that the list doesn’t contain FeedIds.\nConfigExceededSignerCount occurs when the number of …\nConfigInsufficientSignerCount occurs when the number of …\nIndicates that a FeedId is reoccurring on the config …\nIndicates that a SignerAddress is reoccurring on the …\nRepresents errors that arise from the contract itself.\nRepresents errors related to cryptographic operations.\nIndicates that the current update timestamp is not greater …\nIndicates data on chain is stale.\nIndicates that the provided data timestamp is not greater …\nErrors that can be encountered in the …\nIndicates that the number of signers does not meet the …\nUsed when there is leftover data in a payload that should …\nIndicates error while converting from one type of the …\nIndicates an overflow error with <code>U256</code> numbers.\nIndicates that a FeedId is reoccurring in data points.\nIndicates that the recovered signer address is not …\nSignifies that an unsupported size was encountered.\nIndicates that payload timestamps are not equal.\nIndicates that a timestamp is further in the future than …\nUsed when a timestamp is older than allowed by the …\nIndicates error of usize overflow.\nIndicates that the marker bytes for RedStone are incorrect.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")